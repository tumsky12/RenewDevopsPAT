trigger: none

resources:
  repositories:
    - repository: templates
      type: github
      name: tumsky12/CorePipelineTemplates
      endpoint: GitHubConnection
      ref:  'refs/heads/feature/terraform-pipeline-changes'
    - repository: terraformModules
      type: github
      name: tumsky12/CoreTerraformModules
      endpoint: GitHubConnection
      ref:  'refs/heads/feature/terraform-pipeline-changes'

variables:
- group: shared-variable-group

jobs:
# - template: Templates/Jobs/Terraform/terraform-apply-job.yml@templates
#   parameters:
#     name: 'AccessTokenFunctionapp'
#     workingDirectory: $(System.DefaultWorkingDirectory)/RenewDevopsPAT/Infrastructure/Terraform
#     environmentServiceName: $(environmentServiceName)
#     backendAzureRmResourceGroupName: $(devBackendAzureRmResourceGroupName)
#     backendAzureRmResourceGroupLocation: $(backendAzureRmResourceGroupLocation)
#     backendAzureRmStorageAccountName:  $(devBackendAzureRmStorageAccountName)
#     backendAzureRmContainerName: 'pat-tf-storage'
#     backendAzureRmKey: 'terraform.tfstate'
#     planCommandOptions: '-var-file="Variables/dev.tfvars" -var="devops_organization_name=$(organizationName)"'

- template: Templates/Jobs/Terraform/terraform-destroy-job.yml@templates
  parameters:
    name: 'AccessTokenFunctionapp'
    workingDirectory: $(System.DefaultWorkingDirectory)/RenewDevopsPAT/Infrastructure/Terraform
    environmentServiceName: $(environmentServiceName)
    backendAzureRmResourceGroupName: $(devBackendAzureRmResourceGroupName)
    backendAzureRmResourceGroupLocation: $(backendAzureRmResourceGroupLocation)
    backendAzureRmStorageAccountName:  $(devBackendAzureRmStorageAccountName)
    backendAzureRmContainerName: 'pat-tf-storage'
    backendAzureRmKey: 'terraform.tfstate'
    planCommandOptions: '-var-file="Variables/dev.tfvars" -var="devops_organization_name=$(organizationName)"'
# - job:


#   steps:
#   #- script: echo $(System.DefaultWorkingDirectory)
#   - checkout: self
#   - checkout: terraformModules
#   #- powershell: cd $(System.DefaultWorkingDirectory)/RenewDevopsPAT/Infrastructure/Terraform; Get-ChildItem -Path ../../.. -recurse

#   - template: Templates\Steps\Terraform\terraform-init-step.yml@templates
#     parameters:
#       name: 'AccessTokenFunctionapp'
#       workingDirectory: $(System.DefaultWorkingDirectory)/RenewDevopsPAT/Infrastructure/Terraform
#       environmentServiceName: $(environmentServiceName)
#       backendAzureRmResourceGroupName: $(devBackendAzureRmResourceGroupName)
#       backendAzureRmResourceGroupLocation: $(backendAzureRmResourceGroupLocation)
#       backendAzureRmStorageAccountName:  $(devBackendAzureRmStorageAccountName)
#       backendAzureRmContainerName: 'pat-tf-storage'
#       backendAzureRmKey: 'terraform.tfstate'

#   - template: Templates\Steps\Terraform\terraform-plan-step.yml@templates
#     parameters:
#       name: 'AccessTokenFunctionapp'
#       workingDirectory: $(System.DefaultWorkingDirectory)/RenewDevopsPAT/Infrastructure/Terraform
#       environmentServiceName: $(environmentServiceName)
#       planCommandOptions: '-var-file="Variables/dev.tfvars" -var="devops_organization_name=$(organizationName)"'

  # - task: TerraformCLI@1
  #   displayName: 'Terraform Init'
  #   inputs:
  #     command: init
  #     backendType: azurerm
  #     workingDirectory: $(System.DefaultWorkingDirectory)/RenewDevopsPAT/Infrastructure/Terraform
  #     backendServiceArm: $(environmentServiceName)
  #     #ensureBackend: true
  #     backendAzureRmResourceGroupName: $(devBackendAzureRmResourceGroupName)
  #     backendAzureRmResourceGroupLocation: $(backendAzureRmResourceGroupLocation)
  #     backendAzureRmStorageAccountName: $(devBackendAzureRmStorageAccountName)
  #     backendAzureRmStorageAccountSku: 'Standard_RAGRS'
  #     backendAzureRmContainerName: 'pat-tf-storage'
  #     allowTelemetryCollection: true
  #     backendAzureRmKey: 'terraform.tfstate'

  # - template: Templates/Jobs/Terraform/terraform-apply-job.yml@templates
  #   parameters:
  #     name: 'AccessTokenFunctionapp'
  #     workingDirectory: '$(System.DefaultWorkingDirectory)/Infrastructure/Terraform'
  #     environmentServiceName: ${{ parameters.environmentServiceName }}
  #     backendAzureRmResourceGroupName: ${{ parameters.backendAzureRmResourceGroupName }}
  #     backendAzureRmResourceGroupLocation: ${{ parameters.backendAzureRmResourceGroupLocation }}
  #     backendAzureRmStorageAccountName: ${{ parameters.backendAzureRmStorageAccountName }}
  #     backendAzureRmContainerName: ${{ parameters.backendAzureRmContainerName }}
  #     backendAzureRmKey: ${{ parameters.backendAzureRmKey }}
